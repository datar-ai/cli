# coding: utf-8

"""
    RiseML API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.1.0
    Contact: contact@riseml.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class UserLoginResponsePorts(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, web=None, sync=None, minio_data=None, minio_output=None):
        """
        UserLoginResponsePorts - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'web': 'str',
            'sync': 'str',
            'minio_data': 'str',
            'minio_output': 'str'
        }

        self.attribute_map = {
            'web': 'web',
            'sync': 'sync',
            'minio_data': 'minio_data',
            'minio_output': 'minio_output'
        }

        self._web = web
        self._sync = sync
        self._minio_data = minio_data
        self._minio_output = minio_output


    @property
    def web(self):
        """
        Gets the web of this UserLoginResponsePorts.


        :return: The web of this UserLoginResponsePorts.
        :rtype: str
        """
        return self._web

    @web.setter
    def web(self, web):
        """
        Sets the web of this UserLoginResponsePorts.


        :param web: The web of this UserLoginResponsePorts.
        :type: str
        """

        self._web = web

    @property
    def sync(self):
        """
        Gets the sync of this UserLoginResponsePorts.


        :return: The sync of this UserLoginResponsePorts.
        :rtype: str
        """
        return self._sync

    @sync.setter
    def sync(self, sync):
        """
        Sets the sync of this UserLoginResponsePorts.


        :param sync: The sync of this UserLoginResponsePorts.
        :type: str
        """

        self._sync = sync

    @property
    def minio_data(self):
        """
        Gets the minio_data of this UserLoginResponsePorts.


        :return: The minio_data of this UserLoginResponsePorts.
        :rtype: str
        """
        return self._minio_data

    @minio_data.setter
    def minio_data(self, minio_data):
        """
        Sets the minio_data of this UserLoginResponsePorts.


        :param minio_data: The minio_data of this UserLoginResponsePorts.
        :type: str
        """

        self._minio_data = minio_data

    @property
    def minio_output(self):
        """
        Gets the minio_output of this UserLoginResponsePorts.


        :return: The minio_output of this UserLoginResponsePorts.
        :rtype: str
        """
        return self._minio_output

    @minio_output.setter
    def minio_output(self, minio_output):
        """
        Sets the minio_output of this UserLoginResponsePorts.


        :param minio_output: The minio_output of this UserLoginResponsePorts.
        :type: str
        """

        self._minio_output = minio_output

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
